Q. What happens when you initialize a repository? Why do you need it?
A. When the repository is initialized, the files in that repository can now be tracked using Git. This is necessary for adding version control to you files.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
A. Staging area is where files are added from the working directory to have the changes committed. Repository is where the files are added to from the staging area. If you didn't want to add your files from the staging area, you could remove those files before committing.

Q. How can you use the staging area to make sure you have one commit per logical change.
A. After adding the file to the staging area (git add), you can do a git diff --staged to see the changes you made before committing.

Q. What are some situations when branches would be help in keeping your history organized? How would branches help?
A. Branches would help if you wanted to go make a change and see how it affected the code on the master branch.

Q. How do the diagrams help you visualize the branch structure?
A. You can see the parent/child relationship of commits and whether or not those commits are accessible by other branches.

Q. What is the result of merging two branches together? Why do we represent it in a diagram the way we do?
A. Merging branches together incorporates code changes on different branches together. Represented in a diagram to make it easier and more logical to follow.

Q. What are the pros and cons of Git's automatic merging vs always doing merges manually?
A. Git automatic merge will show you the parts of code that need to be addressed before the merge can be completed. Merging manually
will require the user to compare multiple files to find the problem.
